version: '3.9'

services:
    postgres:
        image: postgres:15.3
        restart: unless-stopped
        volumes:
            - db_data:/var/lib/postgresql/data
        environment:
            POSTGRES_DB: tsproject
            # POSTGRES_USER: postgres
            POSTGRES_PASSWORD: 2111
        # ports:
        #     - '5432:5432'

    graphql-engine:
        image: hasura/graphql-engine:v2.46.0
        ports:
            - '8080:8080'
        restart: unless-stopped
        environment:
            HASURA_GRAPHQL_DATABASE_URL: postgres://postgres:2111@postgres:5432/tsproject
            # PG_DATABASE_URL: postgres://postgres:root@postgres:5432/tsproject
            HASURA_GRAPHQL_ADMIN_SECRET: ${HASURA_ADMIN_SECRET}
            HASURA_GRAPHQL_ENABLE_CONSOLE: 'true'
            HASURA_GRAPHQL_DEV_MODE: 'true'
            HASURA_GRAPHQL_ENABLED_LOG_TYPES: startup, http-log, webhook-log, websocket-log, query-log
            HASURA_GRAPHQL_METADATA_DEFAULTS: '{"backend_configs":{"dataconnector":{"athena":{"uri":"http://data-connector-agent:8081/api/v1/athena"},"mariadb":{"uri":"http://data-connector-agent:8081/api/v1/mariadb"},"mysql8":{"uri":"http://data-connector-agent:8081/api/v1/mysql"},"oracle":{"uri":"http://data-connector-agent:8081/api/v1/oracle"},"snowflake":{"uri":"http://data-connector-agent:8081/api/v1/snowflake"}}}}'
            # HASURA_GRAPHQL_JWT_SECRET: '{
            #     "type":"HS256",
            #     "key":"7f54e99fa92056173c2c8afd116213fed8450db0f23305b5dc665bc0ed270c015ba2899404ff3710b155222b089e23f40c56131dd0f5b4bd21f39cc9f82d50e6",
            #     "claims_map": {
            #     "x-hasura-allowed-roles":{"path":"$$.default_roles"},
            #     "x-hasura-default-role":{"path":"$$.role"},
            #     "x-hasura-user-name":{"path":"$$.username"}
            #     }
            #     }'
        depends_on:
            data-connector-agent:
                condition: service_healthy

    data-connector-agent:
        image: hasura/graphql-data-connector:v2.46.0
        restart: unless-stopped
        ports:
            - 8081:8081
        environment:
            QUARKUS_LOG_LEVEL: ERROR
            QUARKUS_OPENTELEMETRY_ENABLED: 'false'
        healthcheck:
            test: ['CMD', 'curl', '-f', 'http://localhost:8081/api/v1/athena/health']
            interval: 5s
            timeout: 10s
            retries: 5
            start_period: 5s

    ts-server:
        image: ts-server:latest
        container_name: ts-server
        build:
            context: .
            dockerfile: Dockerfile
        ports:
            - '8100:8100'
        restart: unless-stopped
        environment:
            NODE_ENV: development
            DEBUG_MODE: 'true'
            PORT: 8100
            DEVELOPMENT: 'true'

            TOKEN_SALT: ${TOKEN_SALT}
            JWT_SECRET: ${JWT_SECRET}
        depends_on:
            - postgres

volumes:
    db_data:
